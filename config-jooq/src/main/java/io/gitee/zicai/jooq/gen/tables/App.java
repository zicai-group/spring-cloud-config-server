/*
 * This file is generated by jOOQ.
*/
package io.gitee.zicai.jooq.gen.tables;


import io.gitee.zicai.jooq.gen.Keys;
import io.gitee.zicai.jooq.gen.Public;
import io.gitee.zicai.jooq.gen.tables.records.AppRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class App extends TableImpl<AppRecord> {

    private static final long serialVersionUID = -1809492498;

    /**
     * The reference instance of <code>PUBLIC.APP</code>
     */
    public static final App APP = new App();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppRecord> getRecordType() {
        return AppRecord.class;
    }

    /**
     * The column <code>PUBLIC.APP.ID</code>. 主键
     */
    public final TableField<AppRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "主键");

    /**
     * The column <code>PUBLIC.APP.APP_NAME</code>. 应用名
     */
    public final TableField<AppRecord, String> APP_NAME = createField("APP_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "应用名");

    /**
     * The column <code>PUBLIC.APP.APP_ENV</code>. 配置环境
     */
    public final TableField<AppRecord, String> APP_ENV = createField("APP_ENV", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "配置环境");

    /**
     * The column <code>PUBLIC.APP.CREATE_TIME</code>. 添加时间
     */
    public final TableField<AppRecord, Timestamp> CREATE_TIME = createField("CREATE_TIME", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "添加时间");

    /**
     * Create a <code>PUBLIC.APP</code> table reference
     */
    public App() {
        this("APP", null);
    }

    /**
     * Create an aliased <code>PUBLIC.APP</code> table reference
     */
    public App(String alias) {
        this(alias, APP);
    }

    private App(String alias, Table<AppRecord> aliased) {
        this(alias, aliased, null);
    }

    private App(String alias, Table<AppRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AppRecord, Long> getIdentity() {
        return Keys.IDENTITY_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AppRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_F;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AppRecord>> getKeys() {
        return Arrays.<UniqueKey<AppRecord>>asList(Keys.CONSTRAINT_F);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public App as(String alias) {
        return new App(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public App rename(String name) {
        return new App(name, null);
    }
}
